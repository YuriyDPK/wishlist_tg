require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const axios = require("axios");

const bot = new Telegraf(process.env.BOT_TOKEN);
// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const state = {};

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.start(async (ctx) => {
  const telegramId = ctx.message.from.id;
  const username = ctx.message.from.username;

  try {
    const response = await axios.post("http://localhost:3000/api/users", {
      telegramId,
      username,
    });
    const { created } = response.data;

    if (created) {
      ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.");
    } else {
      ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${username}!`);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      Markup.keyboard([
        ["üìã –ú–æ–π –í–∏—à–ª–∏—Å—Ç", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≤–∏—à–ª–∏—Å—Ç"],
        ["üëÄ –í–∏—à–ª–∏—Å—Ç –¥—Ä—É–≥–∞", "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞"],
        ["üë• –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞"],
        ["üì• –ó–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è", "‚ùå –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞"],
      ]).resize()
    );
  } catch (error) {
    console.error(error);
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
bot.command("menu", (ctx) => {
  ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    Markup.keyboard([
      ["üìã –ú–æ–π –í–∏—à–ª–∏—Å—Ç", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≤–∏—à–ª–∏—Å—Ç"],
      ["üëÄ –í–∏—à–ª–∏—Å—Ç –¥—Ä—É–≥–∞", "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞"],
      ["üë• –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞"],
      ["üì• –ó–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è", "‚ùå –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞"],
    ]).resize()
  );
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üëÄ –í–∏—à–ª–∏—Å—Ç –¥—Ä—É–≥–∞"
bot.hears("üëÄ –í–∏—à–ª–∏—Å—Ç –¥—Ä—É–≥–∞", async (ctx) => {
  const telegramId = ctx.message.from.id;

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
    const friendsResponse = await axios.get(
      `http://localhost:3000/api/friends/${telegramId}`
    );

    const friends = friendsResponse.data;

    if (friends.length === 0) {
      ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –¥—Ä—É–∂–±—ã.");
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —Å –∏—Ö –Ω–æ–º–µ—Ä–∞–º–∏
    const friendList = friends
      .map((friend, index) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–º
        const friendUsername =
          friend.Requester.telegramId === String(telegramId)
            ? friend.Receiver.username
            : friend.Requester.username;

        return `${index + 1}. ${friendUsername}`;
      })
      .join("\n");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
    ctx.reply(
      `–í–∞—à–∏ –¥—Ä—É–∑—å—è:\n${friendList}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥—Ä—É–≥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –≤–∏—à–ª–∏—Å—Ç–∞.`
    );
    console.log('telegramId: ' + telegramId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∞
    state[telegramId] = { viewingFriendWishlist: true, friends };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π:", error);
    ctx.reply("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì• –ó–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è"
bot.hears("üì• –ó–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è", async (ctx) => {
  try {
    const response = await axios.get(
      `http://localhost:3000/api/friends/requests/${ctx.message.from.id}`
    );
    const requests = response.data;

    if (requests.length === 0) {
      ctx.reply("–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è.");
    } else {
      for (const request of requests) {
        await ctx.reply(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${request.username} —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –¥—Ä—É–∑—å—è.`,
          Markup.inlineKeyboard([
            Markup.button.callback(
              "–ü—Ä–∏–Ω—è—Ç—å",
              `accept_friend_${request.userId}`
            ),
            Markup.button.callback(
              "–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
              `reject_friend_${request.userId}`
            ),
          ])
        );
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è:", error);
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è.");
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìã –ú–æ–π –í–∏—à–ª–∏—Å—Ç"
bot.hears("üìã –ú–æ–π –í–∏—à–ª–∏—Å—Ç", async (ctx) => {
  try {
    const response = await axios.get(
      `http://localhost:3000/api/wishlist/${ctx.message.from.id}`
    );
    const items = response.data;
    if (items.length === 0) {
      ctx.reply("–í–∞—à –≤–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç.");
    } else {
      const itemList = items
        .map((item, index) => `${index + 1}. ${item.text}`)
        .join("\n");
      ctx.reply(`–í–∞—à –≤–∏—à–ª–∏—Å—Ç:\n${itemList}`);
    }
  } catch (error) {
    console.error(error);
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏—à–ª–∏—Å—Ç–∞.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞"
bot.hears("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞", (ctx) => {
  const telegramId = ctx.message.from.id;
  console.log("telegramId: " + telegramId);

  // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞"
  state[telegramId] = { addingFriend: true };

  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë• –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π"
bot.hears("üë• –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π", async (ctx) => {
  try {
    const response = await axios.get(
      `http://localhost:3000/api/friends/${ctx.message.from.id}`
    );

    const friends = response.data;

    if (friends.length === 0) {
      return ctx.reply("–í–∞—à —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø—É—Å—Ç.");
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
    const friendList = friends.map((friend) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–º
      if (friend.Requester.telegramId === String(ctx.message.from.id)) {
        return friend.Receiver.username;
      } else {
        return friend.Requester.username;
      }
    }).join("\n");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
    ctx.reply(`–í–∞—à–∏ –¥—Ä—É–∑—å—è:\n${friendList}`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π:", error);
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π.");
  }
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞"
bot.hears("‚ùå –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞", async (ctx) => {
  const userId = ctx.message.from.id;

  try {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
    const response = await axios.get(`http://localhost:3000/api/friends/${userId}`);
    const friends = response.data;

    if (friends.length === 0) {
      ctx.reply("–í–∞—à —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø—É—Å—Ç.");
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —Å –Ω–æ–º–µ—Ä–∞–º–∏
    const friendList = friends
      .map((friend, index) => {
        const friendUsername =
          friend.Requester.telegramId === String(userId)
            ? friend.Receiver.username
            : friend.Requester.username;

        return `${index + 1}. ${friendUsername}`;
      })
      .join("\n");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    ctx.reply(
      `–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π:\n${friendList}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥—Ä—É–≥–∞.`
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä—É–∑–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state[userId] = { deletingFriend: true, friends };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π:", error);
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≤–∏—à–ª–∏—Å—Ç"
bot.hears("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≤–∏—à–ª–∏—Å—Ç", (ctx) => {
  const userId = ctx.message.from.id;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≤–∏—à–ª–∏—Å—Ç
  state[userId] = { addingToWishlist: true };
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∏—à–ª–∏—Å—Ç.");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞"
bot.hears("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞", async (ctx) => {
  const userId = ctx.message.from.id;

  try {
    const response = await axios.get(
      `http://localhost:3000/api/wishlist/${userId}`
    );
    const items = response.data;
    if (items.length === 0) {
      ctx.reply("–í–∞—à –≤–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç.");
    } else {
      const itemList = items
        .map((item, index) => `${index + 1}. ${item.text}`)
        .join("\n");

      ctx.reply(
        `–í–∞—à –≤–∏—à–ª–∏—Å—Ç:\n${itemList}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`
      );

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      state[userId] = { deletingFromWishlist: true, items };
    }
  } catch (error) {
    console.error(error);
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏—à–ª–∏—Å—Ç–∞.");
  }
});

// ======== –£–î–ê–õ–Ø–ï–ú –∏–ª–∏ –ö–û–ú–ú–ï–ù–¢–ò–†–£–ï–ú —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —Ç.–∫. –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ ========
// bot.command("addfriend", async (ctx) => {
//   /*
//   –í—Å—è –ª–æ–≥–∏–∫–∞ —É—à–ª–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∏–∂–µ
//   */
// });

bot.action(/accept_friend_(.+)/, async (ctx) => {
  const  friendTelegramId =Number(ctx.match[1]); // ID –¥—Ä—É–≥–∞ 
  const telegramId = ctx.callbackQuery.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
  
  console.log("–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞:", {
    telegramId,
    friendTelegramId,
  });

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResponse = await axios.get(
      `http://localhost:3000/api/users/${telegramId}`
    );
    // const friendResponse = await axios.get(
    //   `http://localhost:3000/api/users/${friendTelegramId}`
    // );

    const userId = userResponse.data.id;
    // const friendId = friendResponse.data.id;
    const friendId = friendTelegramId;

    console.log("IDs –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", { userId, friendId });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await axios.post("http://localhost:3000/api/friends/update", {
      userId,
      friendId,
      status: "accepted",
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    await bot.telegram.sendMessage(
      telegramId,
      "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è –±—ã–ª –ø—Ä–∏–Ω—è—Ç!"
    );
    ctx.reply("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.");
  }
});

bot.action(/reject_friend_(.+)/, async (ctx) => {
  const friendTelegramId = Number(ctx.match[1]); // ID –¥—Ä—É–≥–∞
  const telegramId = ctx.callbackQuery.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  try {
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–æ—Å–µ –¥—Ä—É–∂–±—ã
    await axios.delete("http://localhost:3000/api/friends", {
      data: {
        userId: telegramId,
        friendTelegramId,
      },
    });

    ctx.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.");
  }
});


// ================== –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (bot.on("text")) ==================
bot.on("text", async (ctx) => {
  const userId = ctx.message.from.id;
  const userText = ctx.message.text;

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞"
  if (state[userId]?.deletingFromWishlist) {
    const items = state[userId].items;

    const index = parseInt(userText, 10) - 1;
    if (index >= 0 && index < items.length) {
      const itemId = items[index].id;

      try {
        await axios.delete(`http://localhost:3000/api/wishlist/${itemId}`);
        ctx.reply("–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –≤–∏—à–ª–∏—Å—Ç–∞.");
      } catch (error) {
        console.error(error);
        ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞.");
      } finally {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        delete state[userId];
      }
    } else {
      ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
    return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≤–∏—à–ª–∏—Å—Ç"
  if (state[userId]?.addingToWishlist) {
    try {
      const response = await axios.post("http://localhost:3000/api/wishlist", {
        userId,
        text: userText,
      });

      if (response.data.item) {
        ctx.reply("–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –≤–∏—à–ª–∏—Å—Ç.");
      } else {
        ctx.reply("–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.");
      }
    } catch (error) {
      console.error(error);
      ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≤–∏—à–ª–∏—Å—Ç.");
    } finally {
      delete state[userId];
    }
    return;
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞"
  if (state[userId]?.addingFriend) {
    const friendUsername = userText;

    if (!friendUsername) {
      ctx.reply("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–∞.");
      return;
    }

    try {
      const response = await axios.post(
        "http://localhost:3000/api/friends/request",
        {
          telegramId: userId,
          friendUsername,
        }
      );

      if (response.data.request) {
        const friendId = response.data.request.friendId;

        bot.telegram.sendMessage(
          friendId,
          "–í–∞—Å —Ö–æ—Ç—è—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
          Markup.inlineKeyboard([
            Markup.button.callback("–î–∞", `accept_friend_${userId}`),
            Markup.button.callback("–ù–µ—Ç", `reject_friend_${userId}`),
          ])
        );

        ctx.reply("–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
      } else {
        ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    } catch (error) {
      console.error(error);
      ctx.reply(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
      );
    } finally {
      delete state[userId];
    }
    return;
  }

  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏—à–ª–∏—Å—Ç–∞ –¥—Ä—É–≥–∞"
  if (state[userId]?.viewingFriendWishlist) {
    const friendIndex = parseInt(userText, 10) - 1;
  
    if (isNaN(friendIndex) || friendIndex < 0 || friendIndex >= state[userId].friends.length) {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥—Ä—É–≥–∞.");
      return;
    }
  
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥—Ä—É–≥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const friend = state[userId].friends[friendIndex];
  
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º `telegramId` –¥—Ä—É–≥–∞
    const friendTelegramId =
      friend.Requester.telegramId === String(userId)
        ? friend.Receiver.telegramId
        : friend.Requester.telegramId;
  
    console.log("–û–ø—Ä–µ–¥–µ–ª—ë–Ω telegramId –¥—Ä—É–≥–∞:", friendTelegramId); // –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  
    try {
      const wishlistResponse = await axios.get(
        `http://localhost:3000/api/wishlist/${friendTelegramId}`
      );
      const items = wishlistResponse.data;
  
      if (items.length === 0) {
        ctx.reply("–í–∏—à–ª–∏—Å—Ç —ç—Ç–æ–≥–æ –¥—Ä—É–≥–∞ –ø—É—Å—Ç.");
      } else {
        const wishlist = items
          .map((item, i) => `${i + 1}. ${item.text}`)
          .join("\n");
        ctx.reply(`–í–∏—à–ª–∏—Å—Ç –¥—Ä—É–≥–∞:\n${wishlist}`);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏—à–ª–∏—Å—Ç–∞ –¥—Ä—É–≥–∞:", error);
      ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏—à–ª–∏—Å—Ç–∞ –¥—Ä—É–≥–∞.");
    } finally {
      delete state[userId]; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }
    return;
  }


   // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "—É–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞"
   if (state[userId]?.deletingFriend) {
    const friends = state[userId].friends;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    const friendIndex = parseInt(userText, 10) - 1;
    if (isNaN(friendIndex) || friendIndex < 0 || friendIndex >= friends.length) {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥—Ä—É–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.");
      return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥—Ä—É–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const friend = friends[friendIndex];
    const friendTelegramId =
      friend.Requester.telegramId === String(userId)
        ? friend.Receiver.telegramId
        : friend.Requester.telegramId;

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞
      await axios.delete(`http://localhost:3000/api/friends`, {
        data: { userId, friendTelegramId },
      });

      ctx.reply("–î—Ä—É–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞:", error);
      ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } finally {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      delete state[userId];
    }
    return;
  }
  
  

  // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
